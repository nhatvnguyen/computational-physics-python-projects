{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN2pAdi37FWNIT7ySeooR8B"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Nhat Nguyen \n","### Computational Physics, PHYS 421\n","#### HW5, due: 11/15, 10 am\n"],"metadata":{"id":"L84Hhr2Ln9nI"}},{"cell_type":"markdown","source":["1) Consider a probability density function that has an exponential form, f(x) ~ exp(-x/a), over the domain x ∈ [0, ∞).\n","\n","(a) Normalize this p.d.f.\n","\n","(b) The p.d.f. for the decay of an unstable particle or radioactive nucleus is an exponential like this. Here instead of x our variable is time, t, and the constant a is τ, the mean lifetime. The half-life is the time it takes for half of your sample to decay (alternately, the time for the decay probability for an individual particle to be 50%). Find a relationship between the mean lifetime and the half-life.\n","\n","(c) You should find that the mean lifetime is longer than the half-life. Explain qualitatively why this makes sense.\n","\n","(d) A muon is a particle with a mean lifetime of 2.2 microseconds. Muons are created by cosmic rays hitting our atmosphere. Use 15 km up as the point where a muon is created, and calculate the probability of this muon not decaying before it hits the ground directly below it. (These muons move at about 3×108 m/s. Do not use relativity in your solution, although your result will show why relativity is indeed important for a real analysis.)\n","\n","2)\n","\n","(a) Write a function to calculate the robust mean of a data set doing a single N*sigma clip. Find the mean of the g data set we've looked at in class. (N can't be too large or you'll exclude nothing, and it can't be too small or you'll clip away lots of real data. Play around with N in the 2-3 range.)\n","\n","(b) Write a function to calculate the robust mean with an iterated N*sigma clip. The iteration should stop if it converges or when a maximum number of iterations has been reached - use 10 as your max. Find the robust mean of the g data set we've looked at in class."],"metadata":{"id":"_9DSqQrbn75B"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"jVjyREasn5EC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670435611232,"user_tz":480,"elapsed":7,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"7041043e-f1f4-4205-b46c-41918ba4b15b"},"outputs":[{"output_type":"stream","name":"stdout","text":["hit ground = 5e-05 seconds\n","half life = 1.5249237972318798e-06 seconds\n","Probability that the muon decay before it hits ground:  1.3479409456530147e-10\n","Probability that the muon NOT decay before it hits ground:  0.9999999998652059\n"]}],"source":["## part 1D\n","import numpy as np\n","from numpy.random import normal\n","import math\n","\n","mean_lifetime = 2.2e-6\n","median_lifetime = mean_lifetime*np.log(2)\n","time_moun_hit_ground = 15000 / 3e8\n","print('hit ground = ' + str(time_moun_hit_ground) + ' seconds')\n","print('half life = ' + str(median_lifetime) + ' seconds')\n","pdf_decay = np.exp(-time_moun_hit_ground/mean_lifetime)\n","pdf_not_decay = 1 - pdf_decay\n","print(\"Probability that the muon decay before it hits ground: \", pdf_decay)\n","print(\"Probability that the muon NOT decay before it hits ground: \", pdf_not_decay)\n"]},{"cell_type":"code","source":["##  part 2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from astropy.io import ascii\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","g_data = ascii.read('/content/drive/MyDrive/Colab Notebooks/PHYS421_Computational Physics/HW/student_g_values.txt')\n","g_array = np.array([g_data[c] for c in g_data.columns])\n","g_only = g_array[3:,:]\n","g = g_only.flatten()\n","g = np.array(g, float)\n","print(g)\n","print('Mean: ', np.mean(g))\n","print('Std: ', np.std(g))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"USdnYfLoKmDv","executionInfo":{"status":"ok","timestamp":1670435829686,"user_tz":480,"elapsed":18436,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"b28449f9-7b78-4b69-c01e-1e12298f0ce3"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","[ 9.63  9.72  9.66  9.86  9.67  9.72  9.85  9.79  9.73  9.72  9.72  9.75\n","  9.75  9.75  9.71  9.73  9.68  9.75  9.71  9.64  9.74  9.73  9.77  9.78\n","  9.39  9.78  9.75  9.68  9.44  9.71  9.82  9.7   9.72  9.74  9.82  9.18\n","  9.81  9.7   9.9   9.78  9.63  9.73  9.85  9.89  9.61  9.57  9.83  9.7\n","  9.72  9.6   9.65  9.68  9.37  9.6   9.75  9.76  9.7   9.63  9.69  9.77\n","  9.72  9.85  9.72  9.22  9.56  9.72  9.84  9.67  9.69  9.78  9.73  9.7\n","  9.6   9.62  9.69  9.7   9.74  9.66  9.67  9.73  9.76  9.78  9.24  9.84\n","  9.63  9.75  9.72  9.71  9.82  9.73  9.77  9.66  9.77  9.7   9.19  9.73\n","  9.77  9.98  9.64  9.79  9.67  9.74  9.73  9.77  9.74  9.93  9.74  9.82\n","  9.72  9.73  9.71  9.71  9.74  9.74  9.63  9.73  9.69  9.73  9.77  9.8\n","  9.75  9.61  9.7   9.57  9.79  9.74  9.53  9.76  8.57  9.69  9.76  9.79\n","  9.72  9.73  9.75  9.69  9.37  9.63  9.74  9.75  9.74  9.75  9.69  9.71\n","  9.74  9.77  9.62  9.36  9.73  9.76  9.69  9.7   9.79  9.7   9.73  9.73\n","  9.68  9.58  9.77 11.8   9.75  9.92  9.82  9.71  9.64  9.76  9.71  9.65\n","  9.82  9.75  9.54  9.75  9.79  9.74  9.97  9.71  9.68  9.86  9.55  9.72\n","  9.77  9.57  9.74  9.76  9.83  9.84  9.71  9.71  9.73  9.45  9.78  9.59\n","  9.57  9.68  9.79  9.73  9.75  9.75  9.64  9.63  9.64  9.76  9.76  9.77\n","  9.74  9.67  9.86  9.7   9.79 10.2   9.83  9.89  9.82 10.1   9.71  9.8\n","  9.69  9.75  9.78  9.74  9.5   9.74  9.8   9.79  9.63  9.72  9.7   9.78\n","  9.68  9.75  9.82  9.72  9.77  9.54  9.82  9.71  9.72  9.7   9.73  9.76\n","  9.14  9.72  9.69 10.3   9.68  9.75  9.57  8.98  9.8   9.74  9.24  9.87\n","  9.78  9.71  9.64  9.78  9.83  9.73  9.78  9.78  9.74  9.75  9.41  9.7\n","  9.74  9.78  9.71  9.66  9.56  9.81  9.7   9.73  9.73  9.6   9.71  9.75\n","  9.88  9.64  9.66  9.76  9.49  9.64  9.74  9.67  9.8   8.79  9.72  9.73\n","  9.56  9.73  9.72  9.66  9.01  9.69  9.7   9.78  9.8   9.76  9.76  9.68\n","  9.93  9.7   9.68  9.67  9.6   9.67  9.75  9.74  9.73  9.75  9.64  9.73\n","  9.69  9.75  9.77  9.72  9.66  9.79  9.84  9.68  9.75  9.77  9.69  8.7\n","  9.73  9.7   9.71  9.75  9.69  9.7   9.86  9.71  9.83  9.76  9.74  9.67]\n","Mean:  9.70764880952381\n","Std:  0.19962496503506127\n"]}]},{"cell_type":"code","source":["def N_sigma_clip_single(data, N):\n","  \"\"\"\n","  This function performs single N*sigma clip to remove outliers in the data set\n","\n","  Args\n","  data: numpy array, the data set passed in\n","  N : int, the N value of standard deviation for clipping\n","\n","  Return\n","  mean_clipped: float, the mean of the clipped data set\n","  std_clipped: float, the standard deviation of the clipped data set\n","  \"\"\"\n","\n","  mean_data = np.mean(data)\n","  std_data = N*np.std(data, ddof = 1)\n","  \n","  lower_outlier = mean_data - std_data \n","  upper_outlier = mean_data + std_data \n","  data_out = np.empty(0)\n","  for i in data:\n","    if (i < lower_outlier) | (i > upper_outlier) :\n","      data_out = np.append(data_out,i)\n","\n","  data_clipped = np.in1d(data,data_out,invert=True) # return the boolean array that has the same length as the data array\n","  new_data = data[data_clipped] # return the data array (np_array) that does NOT contain the outlier data points\n","  \n","  mean_clipped = np.mean(new_data)\n","  std_clipped = np.std(new_data)\n","\n","  return mean_clipped, std_clipped"],"metadata":{"id":"8MvlWmlbTfgZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## better version\n","\n","def N_sigma_clip_single(data, N):\n","  \"\"\"\n","  This function performs single N*sigma clip to remove outliers in the data set\n","\n","  Args\n","  data: numpy array, the data set passed in\n","  N : int, the N value of standard deviation for clipping\n","\n","  Return\n","  mean_clipped: float, the mean of the clipped data set\n","  std_clipped: float, the standard deviation of the clipped data set\n","  \"\"\"\n","\n","  mean_data = np.mean(data)\n","  std_data = N*np.std(data, ddof = 1)\n","  \n","  lower_outlier = mean_data - std_data \n","  upper_outlier = mean_data + std_data \n","  \n","  new_data = data[(data <= upper_outlier) & (data >= lower_outlier)]\n","  # data_out = np.empty(0)\n","  # for i in data:\n","  #   if (i < lower_outlier) | (i > upper_outlier) :\n","  #     data_out = np.append(data_out,i)\n","\n","  # data_clipped = np.in1d(data,data_out,invert=True) # return the boolean array that has the same length as the data array\n","  # new_data = data[data_clipped] # return the data array (np_array) that does NOT contain the outlier data points\n","  \n","  mean_clipped = np.mean(new_data)\n","  std_clipped = np.std(new_data)\n","\n","  return mean_clipped, std_clipped"],"metadata":{"id":"g5sODX6NudFo","executionInfo":{"status":"ok","timestamp":1670435836212,"user_tz":480,"elapsed":199,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["g_mean_new_1, g_std_new_1 = N_sigma_clip_single(g, N=2)  # N = 2 \n","print('New mean single clip: {:.5f}'.format(g_mean_new_1))\n","print('New std: single clip: {:.5f}'.format(g_std_new_1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kOyIAAMeG-Yy","executionInfo":{"status":"ok","timestamp":1668618173681,"user_tz":480,"elapsed":183,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"2917fae0-39cf-487a-ad57-cd7f36466c3c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["New mean single clip: 9.72115\n","New std: single clip: 0.09069\n"]}]},{"cell_type":"code","source":["g_mean_new_1, g_std_new_1 = N_sigma_clip_single(g, N=2)  # N = 2 \n","print('New mean single clip: {:.5f}'.format(g_mean_new_1))\n","print('New std: single clip: {:.5f}'.format(g_std_new_1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gYYdqKr4u2da","executionInfo":{"status":"ok","timestamp":1670435840663,"user_tz":480,"elapsed":4,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"1ea3992b-bbdc-4f91-c5c0-f20a2756bbc8"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["New mean single clip: 9.72115\n","New std: single clip: 0.09069\n"]}]},{"cell_type":"code","source":["def N_sigma_clip(data, N, iterations):\n","  \"\"\"\n","  This function performs iterations of N sigma clip to remove outliers in the data set\n","\n","  Args\n","  data: numpy array, the data set passed in\n","  N : int, the N value of standard deviation for clipping\n","\n","  Return\n","  mean_clipped: numpy array, the mean of the clipped data set\n","  std_clipped: numpy array, the standard deviation of the clipped data set\n","  \"\"\"\n","\n","  mean_clipped = np.zeros(iterations) \n","  std_clipped = np.zeros(iterations)\n","  for j in range(0,iterations):\n","    mean_data = np.mean(data)\n","    std_data = N*np.std(data)\n","    \n","    lower_outlier = mean_data - std_data \n","    upper_outlier = mean_data + std_data \n","    data_out = np.empty(0)\n","    for data in data:\n","      if (data < lower_outlier) | (data > upper_outlier) :\n","        data_out = np.append(data_out,data)\n","\n","    data_clipped = np.in1d(data,data_out,invert=True) # return the boolean array that has the same length as the data array\n","    new_data = data[data_clipped] # return the data array (np_array) that does NOT contain the outlier data points\n","    \n","    mean_clipped[j] = np.mean(new_data)\n","    std_clipped[j] = np.std(new_data)\n","    data = new_data\n","    j += 1\n","\n","  return mean_clipped, std_clipped"],"metadata":{"id":"M_q8szaZOiQq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## better version\n","\n","def N_sigma_clip(data, N, iterations):\n","  \"\"\"\n","  This function performs iterations of N sigma clip to remove outliers in the data set\n","\n","  Args\n","  data: numpy array, the data set passed in\n","  N : int, the N value of standard deviation for clipping\n","\n","  Return\n","  mean_clipped: numpy array, the mean of the clipped data set\n","  std_clipped: numpy array, the standard deviation of the clipped data set\n","  \"\"\"\n","\n","  mean_clipped = np.zeros(iterations) \n","  std_clipped = np.zeros(iterations)\n","  for j in range(0,iterations):\n","    mean_data = np.mean(data)\n","    std_data = N*np.std(data, ddof = 1)\n","    \n","    lower_outlier = mean_data - std_data \n","    upper_outlier = mean_data + std_data \n","    \n","    new_data = data[(data <= upper_outlier) & (data >= lower_outlier)]\n","    mean_clipped[j] = np.mean(new_data)\n","    std_clipped[j] = np.std(new_data, ddof = 1)\n","    data = new_data\n","    j += 1\n","\n","  return mean_clipped, std_clipped"],"metadata":{"id":"LcD0F0uBvP7t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Original Mean: {:.5f}'.format(np.mean(g)))\n","print('Original Std: {:.5f}'.format(np.std(g)))\n","\n","iterations = 10\n","N = 2\n","g_mean_new, g_std_new = N_sigma_clip(g, N, iterations) \n","print('New mean array: ', g_mean_new)\n","print('New std array: ', g_std_new)\n","print('New mean of ' + str(iterations) + ' clips: ', g_mean_new[9])\n","print('New std of ' + str(iterations) + ' clips: ', g_std_new[9])\n","print('The robust mean coverges to: ', g_mean_new[9])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X55LUbXtGpJv","executionInfo":{"status":"ok","timestamp":1668618346185,"user_tz":480,"elapsed":183,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"3063f267-95e8-4964-c3a1-917e7dc9f286"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Mean: 9.70765\n","Original Std: 0.19962\n","New mean array:  [9.72114907 9.72571895 9.72841549 9.72947761 9.73062745 9.73067511\n"," 9.7306867  9.7306867  9.7306867  9.7306867 ]\n","New std array:  [0.09068536 0.06685004 0.0537727  0.04702837 0.04259705 0.03656634\n"," 0.03535777 0.03535777 0.03535777 0.03535777]\n","New mean of 10 clips:  9.73068669527897\n","New std of 10 clips:  0.03535777462479602\n","The robust mean coverges to:  9.73068669527897\n"]}]}]}