{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPZYvv70PLxSsQD+z4OmAEO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kiw4EG9t2ug9","executionInfo":{"status":"ok","timestamp":1670437939880,"user_tz":480,"elapsed":1427,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"outputs":[],"source":["# import packages\n","import numpy as np\n","from astropy.io import ascii\n","import matplotlib.pyplot as plt\n","from scipy.optimize import curve_fit"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BIadGaTu3Bak","executionInfo":{"status":"ok","timestamp":1670437958483,"user_tz":480,"elapsed":17527,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"6d3b9e26-4589-4c36-f6a8-82fbee3e6624"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# question 1\n","# read in data\n","data = ascii.read('/content/drive/MyDrive/Colab Notebooks/PHYS421_Computational Physics/HW/final/final_problem1.txt')"],"metadata":{"id":"ACRE_7hd3FPL","executionInfo":{"status":"ok","timestamp":1670437997665,"user_tz":480,"elapsed":468,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["## define parabolic equation for fitting\n","\n","def parabolic(x, a, b, c):\n","  \"\"\"\n","  Function for parabolic fitting\n","  Args: \n","  x: array, x values to fit\n","  a: float, parameter 1\n","  b: float, parameter 2\n","  c: float, parameter 3\n","\n","  Return:\n","  a*x**2 + b*x + c: array, y values to fit\n","  \"\"\"\n","  return a * x**2 + b* x + c"],"metadata":{"id":"D-eYBAPo30AU","executionInfo":{"status":"ok","timestamp":1670438463910,"user_tz":480,"elapsed":179,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# fit using scipy curve fit\n","popt, pcov = curve_fit(parabolic, data['x'], data['y'])   # optimize param, covariance param\n","perr = np.sqrt(np.diag(pcov))  # std dev, diagonal elements only"],"metadata":{"id":"YD5vglaD4zBG","executionInfo":{"status":"ok","timestamp":1670438466137,"user_tz":480,"elapsed":2,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# print out parameters found\n","\n","print('Fitted function: ax^2 + bx + c for parabolic equation')\n","print('Best fit parameter: a = ', popt[0])\n","print('Best fit parameter: b = ', popt[1])\n","print('Best fit parameter: c = ', popt[2])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YEPDWkGr5pYZ","executionInfo":{"status":"ok","timestamp":1670443702510,"user_tz":480,"elapsed":194,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"b3ccaa79-51ed-4652-a577-99b1b69bd8f4"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitted function: ax^2 + bx + c for parabolic equation\n","Best fit parameter: a =  -2.2479245628988687\n","Best fit parameter: b =  3.114101503085811\n","Best fit parameter: c =  11.691815500648296\n"]}]},{"cell_type":"code","source":["plt.plot(data['x'], data['y'], 'ro', label='Data points from text file')\n","plt.plot(data['x'], parabolic(data['x'],*popt),'g', label = 'Parabolic fit to the data points', lw = 3) # explode the data\n","plt.legend(loc=0)\n","plt.grid()\n","plt.title('Parabolic fit with data read from final_problem1.txt')\n","plt.text(2,-60,'Nhat Nguyen')\n","plt.xlabel('x values')\n","plt.ylabel('y values')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"P7Wrgcka3Q5n","executionInfo":{"status":"ok","timestamp":1670443938638,"user_tz":480,"elapsed":468,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"cd54d51f-6355-42e3-a061-e3e22201344e"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'y values')"]},"metadata":{},"execution_count":99},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["def smooth_median(data, smoothing_length):\n","  \"\"\"\n","  This function will smooth the data set that is passed through by doing a median smoothing method\n","\n","  Args: \n","  data: numpy array, our data to smooth\n","  smoothing_length: int, the length on one side for our data to be smoothed\n","\n","  Return: \n","  data_smoothed: numpy array, the smoothed data\n","\n","  \"\"\"\n","  data_smoothed = np.empty(len(data))\n","  # median smoothing\n","  for i in range(0, len(data)):\n","    data_smoothed[i] = np.median(data[i:(2*(i+int(smoothing_length))+1)])\n","    i += 1\n","  \n","  return data_smoothed"],"metadata":{"id":"1oW0OtY36Fzi","executionInfo":{"status":"ok","timestamp":1670439260584,"user_tz":480,"elapsed":203,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["smoothing_length = 3\n","smoothed_data_y = smooth_median(data['y'], int(smoothing_length))\n","smoothed_data_x = smooth_median(data['x'], int(smoothing_length))"],"metadata":{"id":"I_-P5eZs7MzM","executionInfo":{"status":"ok","timestamp":1670439262990,"user_tz":480,"elapsed":2,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# plot smoothed values \n","plt.plot(smoothed_data_x, smoothed_data_y, 'ro', label='Smoothed data')\n","plt.plot(data['x'], data['y'], 'go', label = 'Original data')\n","plt.legend()\n","plt.grid()\n","plt.xlabel('x values')\n","plt.ylabel('y values')\n","plt.text(2,-80,'Nhat Nguyen')\n","plt.title('Median smoothed data from final_problem1.txt')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"-6Q7MHXy7Z-m","executionInfo":{"status":"ok","timestamp":1670443900189,"user_tz":480,"elapsed":463,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"ee564f7d-63be-462f-8fe7-bf48b323d5cd"},"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Median smoothed data from final_problem1.txt')"]},"metadata":{},"execution_count":95},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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ESP0008/9d2/fPlyPeuss3THjh2qqvrwww/ryJEjtbGxUXfv3q2lpaW6ceNG3bp1q55yyina1NSkqqq333673nrrrbp7924dPny4fvDBB9rW1qYXXXSRnnXWWTHtuvPOO/Xyyy9XVdU1a9Zofn6+vvXWW6qq2tDQoKqq+/bt01NPPVXXrFkTbu/WrVvDZfjli2b16tUpXv3sY/ny5QnnXbx2sebfmq/MI+ZXdldZp+qxeO1iLburTGWeaNldZbp47eKky0imLdlOT2qLavLtAVaqT7/aK62nEkU2bfJO2Jj6V92AAQNYtWoVf/zjH1m+fDnf+973uP3227nssssAOPfccwGoqKigqamJgQMHMnDgQAoLC2lsbORPf/oTl156Kfn5+ZSUlHDqqafy1ltv+e4/8MADY+owZcoUBg0aBMDo0aOpr6+nsbGR9evXM3HiRAD27t3LySefzHvvvcfIkSMZNWoUANOnT6empiamzNdee42f/OQnAIwZM4YxY8aE05588klqamrYt28fn332GevXr2+Xnmy+3krIkinS0gnSMyoIVATMUspICBMacdDhw5G//S02obRzc735+flMmjSJSZMmUVFRwaJFi8JCIzRtlZeXF/4/tL1vX3pCKEeWm5+fz759+1BVTj/9dB5//PF2ed9+++1OneuTTz5h/vz5vPXWWxx88MFcdtllnqvxE83XkwmuC1K1rIqN2zdSOqiU6inVMR15aLujfIbRVZhOIw575s6Foqh55KIiqE79q+7999/nww8/DG+//fbblJWVJXz8KaecwhNPPEFraytbt27ltdde44QTTvDdP3DgQHbu3NlhuSeddBKvv/46GzZsABz/+x988AFHHXUUdXV1fPTRRwAxQiXEP/7jP4YV7n/9619Zu3YtADt27KB///4MGjSILVu28NJLL4WPiaxbvHy9gdBaifrt9SgaXivhZRUVqAhQN6eOtrlt1M2pM4FhdCs20ojDvosvhn79oKrKmZIqLXUERiD1l7SpqYkf//jHNDY20qdPH4444gjP6R4/LrjgAt544w2OO+44RIRf/OIXfP3rX/fdH1pB/a1vfYsrrriCgw8+2LPcr33tazzyyCNceuml7NmzB4DbbruNI488kpqaGs466yyKioo45ZRTPIXQrFmzuPzyyzn66KM5+uijGT9+PADHHXccxx9/PEcd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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["## part 3\n","data_3 = ascii.read('/content/drive/MyDrive/Colab Notebooks/PHYS421_Computational Physics/HW/final/final_problem3.txt')"],"metadata":{"id":"MfqZbNik8R8u","executionInfo":{"status":"ok","timestamp":1670439349440,"user_tz":480,"elapsed":498,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# part 3 - find the 90% CI using nonparametric bootstrap \n","\n","def bootstrap_median_CI(data, conf_level):\n","    \"\"\"\n","    Computes the confidence interval at the specified confidence level using a nonparametric bootstrap.\n","    \n","    Args:\n","        data: numpy array, data set\n","        conf_level: float, confidence level for the interval, 0 < p < 1\n","        \n","    Returns:\n","        conf_low: float, low end of the confidence interval\n","        conf_high: float, high end of the confidence interval\n","        bootstrap: numpy array, bootstrapped array of calculated means\n","    \"\"\"\n","    \n","    print('Confidence level: {:.1f}'.format(conf_level*100) + '%')\n","    resamplings = int(1e5)  # 10^5 samples\n","    bootstrap = np.empty(resamplings)  # make a new array\n","    for i in range(0,int(resamplings)):\n","      samples = np.random.choice(data, len(data), replace=True) # pick and choose with replacement to make new data sets\n","      bootstrap[i] = np.median(samples)      # calculate the median of the data set made and append it to the bootstrap array \n","      \n","      i += 1\n","\n","    bootstrap_sorted = np.sort(bootstrap)\n","    conf_low = bootstrap_sorted[int(len(bootstrap_sorted)*((1-conf_level)/2))]\n","    conf_high = bootstrap_sorted[int(len(bootstrap_sorted)*(1-((1-conf_level)/2)))]\n","\n","\n","    return conf_low, conf_high, bootstrap"],"metadata":{"id":"tZsxZ0FW8c-q","executionInfo":{"status":"ok","timestamp":1670443834616,"user_tz":480,"elapsed":207,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":89,"outputs":[]},{"cell_type":"code","source":["confidence_level = .90\n","low_CI, high_CI, boot = bootstrap_median_CI(data_3['force'], confidence_level)\n","print('At ' + str(confidence_level*100) + '% confidence level, the lower interval of the median force is at {:.6f}'.format(low_CI)+ ' N')\n","print('At ' + str(confidence_level*100) + '% confidence level, the upper interval of the median force is at {:.6f}'.format(high_CI)+ ' N')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p_HItBgW8xhQ","executionInfo":{"status":"ok","timestamp":1670443844834,"user_tz":480,"elapsed":6246,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"bd3d8abb-c11d-4cb0-b49d-1fd478da54f3"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["Confidence level: 90.0%\n","At 90.0% confidence level, the lower interval of the median force is at 22.337222 N\n","At 90.0% confidence level, the upper interval of the median force is at 24.712089 N\n"]}]},{"cell_type":"code","source":["## part 4 - damped oscillator\n","\n","def dv_dt(x, v):\n","  \"\"\"\n","  This function returns the damped harmonic oscillator function to solve for change in velocity with change in time using Eulerian approach\n","\n","  Args: \n","  x: float, position calculated\n","  v: float, velocity calculated\n","\n","  Return:\n","  dv_dt: float, calculated value of dv_dt\n","  \"\"\"\n","  \n","  # define parameters\n","  k = 25 # N/m\n","  b = 0.5 # Ns/m\n","  m = 0.2 # kg\n","\n","  # equation for acceleration, or change in velocity over time\n","  dv_dt = (-k*x - b*v)/m\n","  \n","  return dv_dt\n","\n"],"metadata":{"id":"EyRDUurs9b_F","executionInfo":{"status":"ok","timestamp":1670443851738,"user_tz":480,"elapsed":612,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["def damp_osc(time_end, time_step, x_0, v_0):\n","  \"\"\"\n","  This function calculates the time, position, velocity using Eulerian approach\n","\n","  Args: \n","  time_end: float, ending time to run \n","  time_step: float, time steps to run\n","  x_0: float, initial position\n","  v_0: float, initial velocity\n","\n","  Return:\n","  time: array, time array for the simulation\n","  x: array, position array calculated\n","  v: array, velocity array calculated  \n","  \"\"\"\n","  \n","  # define parameters\n","  k = 25  # N/m\n","  b = 0.5 # Ns/m\n","  m = 0.2 # kg\n","\n","  time = np.arange(0, time_end+time_step, time_step)\n","  total_steps = len(time)\n","  \n","  x = np.zeros(total_steps)\n","  v = np.zeros(total_steps)\n","  x[0] = x_0\n","  v[0] = v_0\n","    \n","  i = 1\n","\n","  while (i < total_steps):\n","      dt = time_step\n","      dv_dt2 = dv_dt(x[i-1],  v[i-1])\n","      dx = dv_dt2 * dt * dt\n","      dv = dv_dt2 * dt\n","      x[i] = x[i-1] + dx\n","      v[i] = v[i-1] + dv\n","      i += 1\n","\n","  return time, x, v"],"metadata":{"id":"AXvA8g-7_26A","executionInfo":{"status":"ok","timestamp":1670443855997,"user_tz":480,"elapsed":609,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}}},"execution_count":92,"outputs":[]},{"cell_type":"code","source":["time_end = 3 # run for 3 seconds\n","time_step = 0.01\n","x_0 = 1 # initial at 1 m away from equilibrium\n","v_0 = 0 # no initial velocity\n","\n","time, x, v = damp_osc(time_end, time_step, x_0, v_0)\n","total_steps = len(time)\n","plt.plot(time, x, label = 'position change over time')\n","plt.plot(time, np.zeros(total_steps) + x_0, label='initial equilibrium')\n","plt.plot(time, np.zeros(total_steps) + x[total_steps-1], label='final equilibrium')\n","plt.xlabel('time [s]')\n","plt.ylabel('position [m]')\n","plt.legend(loc=0)\n","plt.grid()\n","plt.text(2,0.7,'Nhat Nguyen')\n","plt.title('Position as a function of time in a damped oscillator')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"-Xnu4BRUGQbl","executionInfo":{"status":"ok","timestamp":1670443883983,"user_tz":480,"elapsed":716,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"c726a961-7f5b-48f6-cf6a-c6d437bd5fa2"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Position as a function of time in a damped oscillator')"]},"metadata":{},"execution_count":94},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# check convergence\n","close = abs(x - x[total_steps-1]) < 0.1 # calculating different, \n","print('We reach the new equilibrium in {:.4}'.format(x[close][0]) + ' seconds')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"biVU4aAUIQAs","executionInfo":{"status":"ok","timestamp":1670442923843,"user_tz":480,"elapsed":205,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"d56352a8-fd5b-4576-c3ea-6a8b61cb3bb2"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["We reach the new equilibrium in 0.7648 seconds\n"]}]},{"cell_type":"code","source":["## part 5\n","\n","import time\n","\n","print('----------- np.arange -----------')\n","beginning = time.time()\n","\n","array = np.arange(1,200001,1)\n","print(array) # should not do this but just wanna check\n","print(len(array))\n","\n","\n","end = time.time()\n","print('this process took', end-beginning, 'seconds')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tKJoun6dAMHG","executionInfo":{"status":"ok","timestamp":1670444151001,"user_tz":480,"elapsed":3,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"2243b281-2a1e-488a-c75e-e43feae148eb"},"execution_count":102,"outputs":[{"output_type":"stream","name":"stdout","text":["----------- np.arange -----------\n","[     1      2      3 ... 199998 199999 200000]\n","200000\n","this process took 0.0025315284729003906 seconds\n"]}]},{"cell_type":"code","source":["## part 5 - fill in empty array\n","\n","import time\n","\n","print('----------- np.empty loop -----------')\n","beginning = time.time()\n","\n","array = np.empty(200000)\n","\n","for i in range(0, 200000,1):\n","  array[i] = i+1 \n","\n","\n","print(array)\n","print(len(array))\n","\n","\n","end = time.time()\n","print('this process took', end-beginning, 'seconds')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KEIqh5siAuj1","executionInfo":{"status":"ok","timestamp":1670440862061,"user_tz":480,"elapsed":5,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"d8297793-1233-4ae4-e61f-8d3a5bbb4b37"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["----------- np.empty loop -----------\n","[1.00000e+00 2.00000e+00 3.00000e+00 ... 1.99998e+05 1.99999e+05\n"," 2.00000e+05]\n","200000\n","this process took 0.04682564735412598 seconds\n"]}]},{"cell_type":"code","source":["import time\n","\n","print('----------- np.empty append -----------')\n","beginning = time.time()\n","\n","array = np.empty(0)\n","\n","for i in range(0, 200000,1):\n","  array = np.append(array, i+1) \n","\n","\n","print(array)\n","print(len(array))\n","\n","\n","end = time.time()\n","print('this process took', end-beginning, 'seconds')\n","## omg super long processing time"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hmh-x8y5COGw","executionInfo":{"status":"ok","timestamp":1670440962788,"user_tz":480,"elapsed":27022,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"898664ff-bf5c-4d73-b782-db652fc1b1e3"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["----------- np.empty append -----------\n","[1.00000e+00 2.00000e+00 3.00000e+00 ... 1.99998e+05 1.99999e+05\n"," 2.00000e+05]\n","200000\n","this process took 26.84477138519287 seconds\n"]}]},{"cell_type":"code","source":["print(\"Thank you for a great quarter, Dr. Syphers! I've learned a lot. I'll let you know when I got to use these\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gnwHwQwhOZPR","executionInfo":{"status":"ok","timestamp":1670444108957,"user_tz":480,"elapsed":192,"user":{"displayName":"Nhat Nguyen","userId":"12519508785998357501"}},"outputId":"68b10f46-34f7-4d07-c33c-82c2345fab9d"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["Thank you for a great quarter, Dr. Syphers! I've learned a lot. I'll let you know when I got to use these\n"]}]}]}